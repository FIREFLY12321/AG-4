name: CI/CD Deployment Pipeline (Outstanding Level)
permissions:
  contents: write
  pull-requests: write
  issues: write
  pages: write
  id-token: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ===============================
  # 🏗️ Job 1：建置 + 測試 + 上傳 artifact
  # ===============================
  build:
    name: Build and Test (Matrix)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.NEW_TAG }}
    strategy:
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Generate Semantic Version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEW_TAG=$(echo $LAST_TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "📦 New Version: $NEW_TAG"

      # 🧾 自動產生 changelog
      - name: Generate Changelog
        id: changelog
        if: matrix.node == 18  # 只在一個 matrix 執行
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" | head -20)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          echo "📝 Changelog generated"
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" > changelog.txt

      # ✅ 新增：將 changelog 作為 artifact 儲存
      - name: Save changelog as artifact
        if: matrix.node == 18
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.txt

      # 🧪 Pre-build lint/test gate (Fail Fast)
      - name: 🔍 Pre-build Quality Gate
        run: |
          echo "🔍 Running quality checks before build..."

          echo "📦 Installing dependencies for checks..."
          bun install
          
          # Lint check (skip if not configured, fail if configured but fails)
          echo "Running lint..."
          set +e
          LINT_OUTPUT=$(bun run lint 2>&1)
          LINT_EXIT=$?
          set -e
          
          if echo "$LINT_OUTPUT" | grep -qi "was not found\|script not found"; then
            echo "⚠️ Warning: No lint script configured - skipping"
          elif [ $LINT_EXIT -ne 0 ]; then
            echo "❌ Lint failed - stopping build"
            echo "$LINT_OUTPUT"
            exit 1
          else
            echo "✅ Lint passed"
          fi
          
          # Test check (skip if not configured, fail if configured but fails)
          echo "Running tests..."
          set +e
          TEST_OUTPUT=$(bun run test 2>&1)
          TEST_EXIT=$?
          set -e
          
          if echo "$TEST_OUTPUT" | grep -qi "was not found\|script not found"; then
            echo "⚠️ Warning: No test script configured - skipping"
          elif [ $TEST_EXIT -ne 0 ]; then
            echo "❌ Tests failed - stopping build"
            echo "$TEST_OUTPUT"
            exit 1
          else
            echo "✅ Tests passed"
          fi
          
          echo "✅ Quality gate passed"

      - name: Build and Package Artifact
        run: |
          echo "🛠️ Building project for Node ${{ matrix.node }}..."
          bun run build
          
          echo "🧹 Cleaning previous archives..."
          rm -f build-${{ matrix.node }}.zip
          
          echo "🗜️ Creating distributable archive..."
          zip -r build-${{ matrix.node }}.zip . \
            -x ".git/*" "*.git" "node_modules/*" "build-*.zip" "changelog.txt"
          echo "✅ Archive ready: build-${{ matrix.node }}.zip"

      - name: Upload build artifact (unique per Node)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node }}
          path: build-${{ matrix.node }}.zip

      - name: Notify on Deployment Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Failed',
              body: `## Deployment Failure
              
              **Environment:** Production
              **Version:** ${{ needs.build.outputs.version }}
              **Workflow Run:** [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ### Immediate Action Required
              Production deployment has failed. Please investigate immediately.`,
              labels: ['critical', 'deployment-failure'],
              assignees: ['FIREFLY12321']  // 你的 GitHub 用戶名
            })    

  # ===============================
  # 🧪 Job 2：執行單元測試
  # ===============================
  test-unit:
    name: Run Unit Tests
    needs: build
    runs-on: ubuntu-latest
    env:
      TEST_ENV: unit
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: false

      - name: Extract artifact
        run: |
          mkdir -p build
          ZIP_FILE=$(find . -maxdepth 2 -type f -name "build-*.zip" | head -n 1)
          if [ -z "$ZIP_FILE" ]; then
            echo "❌ 找不到 build-*.zip artifact"
            ls -R
            exit 1
          fi
          echo "📦 解壓縮 artifact: $ZIP_FILE"
          unzip -oq "$ZIP_FILE" -d build

      - name: Install dependencies
        working-directory: build
        run: |
          if [ -d node_modules ]; then
            echo "✅ node_modules 已存在，略過安裝"
          else
            bun install
          fi

      - name: Prepare test report directories
        working-directory: build
        run: mkdir -p reports/junit

      - name: Run unit tests
        working-directory: build
        run: |
          set -o pipefail
          bun run test:unit:ci | tee test-results-unit.txt

      - name: Upload unit test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-logs
          path: build/test-results-unit.txt
          if-no-files-found: warn

      - name: Upload unit JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-unit
          path: build/reports/junit/unit-tests.xml
          if-no-files-found: warn
      - name: Notify on Deployment Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Failed',
              body: `## Deployment Failure
              
              **Environment:** Production
              **Version:** ${{ needs.build.outputs.version }}
              **Workflow Run:** [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ### Immediate Action Required
              Production deployment has failed. Please investigate immediately.`,
              labels: ['critical', 'deployment-failure'],
              assignees: ['FIREFLY12321']  // 你的 GitHub 用戶名
            })    

  # ===============================
  # 🧪 Job 3：執行整合測試與覆蓋率
  # ===============================
  test-integration:
    name: Run Integration Tests & Coverage
    needs: test-unit
    runs-on: ubuntu-latest
    env:
      TEST_ENV: integration
      COVERAGE_THRESHOLD: 80
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: false

      - name: Extract artifact
        run: |
          mkdir -p build
          ZIP_FILE=$(find . -maxdepth 2 -type f -name "build-*.zip" | head -n 1)
          if [ -z "$ZIP_FILE" ]; then
            echo "❌ 找不到 build-*.zip artifact"
            ls -R
            exit 1
          fi
          echo "📦 解壓縮 artifact: $ZIP_FILE"
          unzip -oq "$ZIP_FILE" -d build

      - name: Install dependencies
        working-directory: build
        run: |
          if [ -d node_modules ]; then
            echo "✅ node_modules 已存在，略過安裝"
          else
            bun install
          fi

      - name: Prepare test report directories
        working-directory: build
        run: mkdir -p reports/junit

      - name: Run integration tests
        working-directory: build
        run: |
          set -o pipefail
          bun run test:integration:ci | tee test-results-integration.txt

      - name: Run coverage across all tests
        working-directory: build
        run: |
          set -o pipefail
          bun run test:coverage | tee coverage-summary.txt

      - name: Enforce coverage threshold
        working-directory: build
        run: |
          node -e "
            const fs = require('node:fs');
            const summary = fs.readFileSync('coverage-summary.txt', 'utf8');
            const match = summary.match(/# all files\s*\|\s*([\d.]+)/);
            if (!match) {
              console.error('❌ Unable to locate coverage data');
              process.exit(1);
            }
            const coverage = parseFloat(match[1]);
            const threshold = Number(process.env.COVERAGE_THRESHOLD);
            console.log('📊 Line coverage:', coverage + '%');
            if (coverage < threshold) {
              console.error(`❌ Coverage ${coverage}% is below threshold ${threshold}%`);
              process.exit(1);
            }
          "


      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            build/coverage-summary.txt
            build/test-results-integration.txt
          if-no-files-found: warn

      - name: Upload integration JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-integration
          path: build/reports/junit/integration-tests.xml
          if-no-files-found: warn
      - name: Create Issue on Test Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ Integration Tests Failed',
              body: `## Test Failure Report
              
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              **Commit:** ${context.sha}
              
              [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ### Action Required
              Please review and fix the failing tests before proceeding with deployment.`,
              labels: ['bug', 'ci-failure']
            })
      - name: Generate Coverage Badge
        working-directory: build
        run: |
          # 從 coverage-summary.txt 提取覆蓋率
          COVERAGE=$(grep "# all files" coverage-summary.txt | awk '{print $4}' | sed 's/%//')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          
          # 生成顏色
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            COLOR="yellow"
          else
            COLOR="red"
          fi
          echo "COVERAGE_COLOR=$COLOR" >> $GITHUB_ENV

      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = process.env.COVERAGE;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 📊 Test Coverage Report
              
              **Coverage:** ${coverage}%
              **Threshold:** 80%
              **Status:** ${coverage >= 80 ? '✅ PASSED' : '❌ FAILED'}
              
              [View Full Report](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            })
      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('build/coverage-summary.txt', 'utf8');
            const match = summary.match(/# all files\s*\|\s*([\d.]+)/);
            const coverage = match ? match[1] : 'N/A';
            const threshold = 80;
            const status = parseFloat(coverage) >= threshold ? '✅ PASSED' : '❌ FAILED';
            const color = parseFloat(coverage) >= threshold ? '🟢' : '🔴';
            
            const body = `## 📊 Test Coverage Report
            
            ${color} **Coverage:** ${coverage}%  
            **Threshold:** ${threshold}%  
            **Status:** ${status}
            
            ### 📈 Coverage Breakdown
            \`\`\`
            ${summary.split('\n').slice(0, 10).join('\n')}
            \`\`\`
            
            [View Full Report](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ---
            *Automated coverage report by CI/CD Pipeline*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });        
      - name: Notify on Deployment Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Failed',
              body: `## Deployment Failure
              
              **Environment:** Production
              **Version:** ${{ needs.build.outputs.version }}
              **Workflow Run:** [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ### Immediate Action Required
              Production deployment has failed. Please investigate immediately.`,
              labels: ['critical', 'deployment-failure'],
              assignees: ['FIREFLY12321']  // 你的 GitHub 用戶名
            })     
      - name: Create Issue on Test Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `❌ Integration Tests Failed - Run #${context.runNumber}`,
              body: `## 🚨 Test Failure Report
              
              **Workflow:** ${context.workflow}
              **Run Number:** ${context.runNumber}
              **Commit:** \`${context.sha.substring(0, 7)}\`
              **Branch:** ${context.ref}
              **Triggered by:** @${context.actor}
              
              ### 📋 Details
              - **Coverage Threshold:** 80%
              - **Test Suite:** Integration Tests
              
              ### 🔗 Links
              - [View Workflow Run](${runUrl})
              - [View Commit](${context.payload.repository.html_url}/commit/${context.sha})
              
              ### ⚠️ Action Required
              Please review the test logs and fix the failing tests before proceeding with deployment.
              
              ---
              *This issue was automatically created by GitHub Actions*`,
              labels: ['bug', 'ci-failure', 'automated']
            });        
            

  # ===============================
  # 📊 Job 4：彙總測試報告（JUnit + Allure）
  # ===============================
  test-reports:
    name: Generate Aggregated Test Reports
    needs: test-integration
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: 準備報告目錄
        run: mkdir -p reports/junit

      - name: Download JUnit reports
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          pattern: junit-*
          path: reports/junit
          merge-multiple: true

      - name: 檢查是否存在 JUnit 報告
        id: check-junit
        run: |
          if ls reports/junit/*.xml >/dev/null 2>&1; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 未找到 JUnit 報告，略過 Allure 生成"
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Allure CLI
        if: steps.check-junit.outputs.found == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y allure

      - name: Generate Allure report
        if: steps.check-junit.outputs.found == 'true'
        run: |
          mkdir -p reports/allure-results
          cp reports/junit/*.xml reports/allure-results/
          allure generate reports/allure-results --clean -o allure-report

      - name: Upload aggregated JUnit reports
        if: steps.check-junit.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: junit-aggregate
          path: reports/junit/*.xml

      - name: Upload Allure HTML report
        if: steps.check-junit.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Upload Allure report for Pages
        if: github.event_name != 'pull_request' && steps.check-junit.outputs.found == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report
          artifact-name: allure-pages

  # ===============================
  # 🌐 Job 5：部署 Allure 報告至 GitHub Pages
  # ===============================
  deploy-allure-pages:
    name: Deploy Allure Report to GitHub Pages
    needs: test-reports
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy Allure report
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact-name: allure-pages

  # ===============================
  # 🚀 Job 6：部署至 dev 環境
  # ===============================
  deploy-dev:
    name: Deploy to Development
    needs: [build, test-integration]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Install GitHub CLI
        run: sudo apt install gh -y
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: false

      # ✅ 新增：下載 changelog artifact
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          
      - name: Verify artifact
        run: ls -lh

      - name: Prepare release archive
        run: |
          ZIP_FILE=$(find . -maxdepth 2 -type f -name "build-*.zip" | head -n 1)
          if [ -z "$ZIP_FILE" ]; then
            echo "❌ 找不到 build-*.zip artifact"
            ls -R
            exit 1
          fi
          echo "📦 Using artifact: $ZIP_FILE"
          cp "$ZIP_FILE" build.zip
  
      # 🔐 使用環境專屬 Secrets
      - name: Create or Update Dev Release
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="dev-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="Development build $TAG
          ## 📝 Changes in this release:
          $CHANGELOG"
          
          echo "🚀 Deploying $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing dev release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "🆕 Creating new dev release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
      - name: Notify on Deployment Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Failed',
              body: `## Deployment Failure
              
              **Environment:** Production
              **Version:** ${{ needs.build.outputs.version }}
              **Workflow Run:** [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ### Immediate Action Required
              Production deployment has failed. Please investigate immediately.`,
              labels: ['critical', 'deployment-failure'],
              assignees: ['FIREFLY12321']  // 你的 GitHub 用戶名
            })      

  # ===============================
  # 🧪 Job 7：部署至 staging 環境
  # ===============================
  deploy-staging:
    name: Deploy to Staging
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Install GitHub CLI
        run: sudo apt install gh -y
  
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: false

      # ✅ 新增：下載 changelog artifact
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Prepare release archive
        run: |
          ZIP_FILE=$(find . -maxdepth 2 -type f -name "build-*.zip" | head -n 1)
          if [ -z "$ZIP_FILE" ]; then
            echo "❌ 找不到 build-*.zip artifact"
            ls -R
            exit 1
          fi
          echo "📦 Using artifact: $ZIP_FILE"
          cp "$ZIP_FILE" build.zip
  
      - name: Create or Update Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.STG_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="🧪 Pre-production test build $TAG
          
          ## 📝 Changes in this release:
          $CHANGELOG"
          
          echo "🚀 Deploying staging release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing staging release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "🆕 Creating new staging release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
      - name: Notify on Deployment Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Failed',
              body: `## Deployment Failure
              
              **Environment:** Production
              **Version:** ${{ needs.build.outputs.version }}
              **Workflow Run:** [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ### Immediate Action Required
              Production deployment has failed. Please investigate immediately.`,
              labels: ['critical', 'deployment-failure'],
              assignees: ['FIREFLY12321']  // 你的 GitHub 用戶名
            })          
  # ===============================
  # 🎯 Job 8：部署至 production 環境（需人工批准）
  # ===============================
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      # ✅ 新增：下載 changelog artifact
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Prepare release archive
        run: |
          ZIP_FILE=$(find . -maxdepth 2 -type f -name "build-*.zip" | head -n 1)
          if [ -z "$ZIP_FILE" ]; then
            echo "❌ 找不到 build-*.zip artifact"
            ls -R
            exit 1
          fi
          echo "📦 Using artifact: $ZIP_FILE"
          cp "$ZIP_FILE" build.zip

      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.PROD_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="prod-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="🚀 Official production release $TAG
          
          ## 📝 Changes in this release:
          $CHANGELOG
          
          ## ✅ Quality Assurance
          - ✅ Passed all tests
          - ✅ Deployed to dev
          - ✅ Deployed to staging
          - ✅ Manual approval granted"
          
          echo "🚀 Creating production release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing production release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "🆕 Creating new production release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
      - name: Notify on Deployment Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Failed',
              body: `## Deployment Failure
              
              **Environment:** Production
              **Version:** ${{ needs.build.outputs.version }}
              **Workflow Run:** [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ### Immediate Action Required
              Production deployment has failed. Please investigate immediately.`,
              labels: ['critical', 'deployment-failure'],
              assignees: ['FIREFLY12321']  // 你的 GitHub 用戶名
            })      
      - name: Create Issue on Deployment Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Production Deployment Failed - v${{ needs.build.outputs.version }}`,
              body: `## ⚠️ Critical: Production Deployment Failure
              
              **Version:** v${{ needs.build.outputs.version }}
              **Workflow Run:** [#${context.runNumber}](${runUrl})
              **Commit:** \`${context.sha.substring(0, 7)}\`
              **Deployed by:** @${context.actor}
              
              ### 🔍 Environment Status
              - ✅ Tests Passed
              - ✅ Dev Deployment: Success
              - ✅ Staging Deployment: Success
              - ❌ Production Deployment: **FAILED**
              
              ### 🚨 Immediate Action Required
              1. Review deployment logs
              2. Check environment configuration
              3. Verify artifact integrity
              4. Rollback if necessary
              
              ### 🔗 Quick Links
              - [View Logs](${runUrl})
              - [Release Page](${context.payload.repository.html_url}/releases)
              
              ---
              *This is a critical issue that requires immediate attention*`,
              labels: ['critical', 'deployment-failure', 'production', 'automated'],
              assignees: ['FIREFLY12321']
            });              
