name: CI/CD Deployment Pipeline (Outstanding Level)
permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ===============================
  # 🏗️ Job 1：建置 + 測試 + 上傳 artifact
  # ===============================
  build:
    name: Build and Test (Matrix)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.NEW_TAG }}
    strategy:
      matrix:
        node: [18, 20]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # 📦 自動遞增版本號
      - name: Generate Semantic Version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEW_TAG=$(echo $LAST_TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "📦 New Version: $NEW_TAG"

      # 🧾 產生 changelog
      - name: Generate Changelog
        if: matrix.node == 18
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            git log --oneline --pretty=format:"- %s (%h)" | head -20 > changelog.txt
          else
            git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)" > changelog.txt
          fi
          echo "📝 changelog.txt generated"
      
      - name: Save changelog as artifact
        if: matrix.node == 18
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.txt

      # 🧪 Quality Gate：Lint + Test
      - name: 🔍 Pre-build Quality Gate
        run: |
          echo "🔍 Running quality checks..."
          set +e
          LINT_OUTPUT=$(bun run lint 2>&1)
          LINT_EXIT=$?
          TEST_OUTPUT=$(bun run test 2>&1)
          TEST_EXIT=$?
          set -e

          if echo "$LINT_OUTPUT" | grep -qi "was not found"; then
            echo "⚠️ No lint script - skipped"
          elif [ $LINT_EXIT -ne 0 ]; then
            echo "$LINT_OUTPUT"
            exit 1
          else
            echo "✅ Lint passed"
          fi

          if echo "$TEST_OUTPUT" | grep -qi "was not found"; then
            echo "⚠️ No test script - skipped"
          elif [ $TEST_EXIT -ne 0 ]; then
            echo "$TEST_OUTPUT"
            exit 1
          else
            echo "✅ Tests passed"
          fi

      - name: Install dependencies and build
        run: |
          echo "📦 Installing dependencies..."
          bun install
          echo "🏗️ Building project..."
          bun run build
          zip -r build.zip .

      - name: Upload build artifact (per Node)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node }}
          path: build.zip
          retention-days: 1

  # ===============================
  # 🚀 Job 2：部署至 dev 環境
  # ===============================
  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Create or Update Dev Release
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="dev-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="Development build $TAG

          ## 📝 Changes:
          $CHANGELOG"
          echo "🚀 Deploying Dev $TAG"

          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

  # ===============================
  # 🧪 Job 3：部署至 staging 環境
  # ===============================
  deploy-staging:
    name: Deploy to Staging
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Create or Update Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.STG_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="🧪 Staging build $TAG

          ## 📝 Changes:
          $CHANGELOG"
          echo "🚀 Deploying Staging $TAG"

          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

  # ===============================
  # 🎯 Job 4：部署至 production 環境（需人工批准）
  # ===============================
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.PROD_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="prod-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="🚀 Official production release $TAG

          ## 📝 Changelog:
          $CHANGELOG

          ## ✅ QA Summary
          - ✅ Passed Lint & Test
          - ✅ Deployed to Dev & Staging
          - ✅ Approved for Production"

          echo "🚀 Creating production release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
