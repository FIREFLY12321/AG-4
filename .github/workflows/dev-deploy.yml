name: CI/CD Deployment Pipeline (Outstanding Level++)
permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ===============================
  # 🏗️ Job 1：建置 + 測試 + 上傳 artifact
  # ===============================
  build:
    name: Build and Test (Matrix)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.NEW_TAG }}
      changelog: ${{ steps.changelog.outputs.CHANGELOG }}
    strategy:
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Generate Semantic Version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEW_TAG=$(echo $LAST_TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "📦 New Version: $NEW_TAG"

      # 🧾 自動產生 Changelog
      - name: Generate Changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" | head -20)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          
          # 儲存到檔案避免特殊字元問題
          echo "$CHANGELOG" > changelog.txt
          
          # 使用 multiline output
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "📝 Changelog generated:"
          echo "$CHANGELOG"

      # 🧪 Pre-build Lint Gate (Fail Fast)
      - name: Run Lint Check (Quality Gate)
        run: |
          echo "🔍 Running lint checks..."
          bun run lint || {
            echo "❌ Lint check failed! Please fix code style issues."
            exit 1
          }

      - name: Install dependencies and build
        run: |
          echo "📦 Installing dependencies..."
          bun install
          echo "🏗️ Building project..."
          bun run build
          zip -r build.zip .

      # 🧪 Pre-build Test Gate
      - name: Run Tests (Quality Gate)
        run: |
          echo "🧪 Running tests..."
          bun run test || {
            echo "❌ Tests failed! Build cannot proceed."
            exit 1
          }

      - name: Upload build artifact (unique per Node)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node }}
          path: build.zip
          retention-days: 1

      # 📧 Notify PR with Build Status
      - name: Comment on PR (Build Success)
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Build Successful** (Node ${{ matrix.node }})\n\n` +
                    `Version: \`${{ steps.version.outputs.NEW_TAG }}\`\n` +
                    `All tests passed and ready for deployment!`
            })

      - name: Comment on PR (Build Failed)
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Build Failed** (Node ${{ matrix.node }})\n\n` +
                    `Please check the workflow logs for details.`
            })

  # ===============================
  # 🚀 Job 2：部署至 dev 環境
  # ===============================
  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Install GitHub CLI
        run: sudo apt install gh -y
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true
            
      - name: Verify artifact
        run: ls -lh
  
      # 🔐 使用環境專屬 Token
      - name: Create or Update Dev Release
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="dev-${{ needs.build.outputs.version }}"
          
          # 包含 Changelog 的發布說明
          cat > release_notes.md << 'EOF'
          ## 🔧 Development Build
          
          **Version:** ${{ needs.build.outputs.version }}
          **Environment:** Development
          
          ### 📝 Changes in this release:
          ${{ needs.build.outputs.changelog }}
          
          ---
          *Auto-generated by GitHub Actions*
          EOF
          
          echo "🚀 Deploying $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing dev release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes-file release_notes.md
          else
            echo "🆕 Creating new dev release..."
            gh release create "$TAG" build.zip --notes-file release_notes.md
          fi

      # 📧 通知相關 Issue
      - name: Notify Related Issues
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 從最近的 commit 訊息中提取 issue 編號
          ISSUES=$(git log -1 --pretty=%B | grep -oP '#\K\d+' || echo "")
          
          if [ ! -z "$ISSUES" ]; then
            for ISSUE in $ISSUES; do
              gh issue comment $ISSUE --body "🚀 Related code has been deployed to **dev** environment (v${{ needs.build.outputs.version }})" || true
            done
          fi

      - name: Deployment Status
        if: always()
        run: echo "✅ Dev deployment ${{ needs.build.outputs.version }} finished"

  # ===============================
  # 🧪 Job 3：部署至 staging 環境
  # ===============================
  deploy-staging:
    name: Deploy to Staging
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Install GitHub CLI
        run: sudo apt install gh -y
  
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true
  
      # 🔐 使用 Staging 專屬 Token
      - name: Create or Update Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.STG_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-${{ needs.build.outputs.version }}"
          
          cat > release_notes.md << 'EOF'
          ## 🧪 Staging Build (Pre-Production)
          
          **Version:** ${{ needs.build.outputs.version }}
          **Environment:** Staging
          
          ### 📝 Changes in this release:
          ${{ needs.build.outputs.changelog }}
          
          ### ⚠️ Testing Required
          Please conduct thorough testing before promoting to production.
          
          ---
          *Auto-generated by GitHub Actions*
          EOF
          
          echo "🚀 Deploying staging release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing staging release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes-file release_notes.md
          else
            echo "🆕 Creating new staging release..."
            gh release create "$TAG" build.zip --notes-file release_notes.md
          fi

      # 📧 Notify PR about Staging Deployment
      - name: Comment on PR (Staging Deployed)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🧪 **Deployed to Staging**\n\n` +
                    `Version: \`${{ needs.build.outputs.version }}\`\n` +
                    `Ready for QA testing before production release.`
            })

      - name: Slack Notification
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"🧩 Staging release *${{ needs.build.outputs.version }}* completed successfully.\n\n📝 Changelog:\n\`\`\`${{ needs.build.outputs.changelog }}\`\`\`\"}" \
            $WEBHOOK_URL || echo "⚠️ Slack not configured"

  # ===============================
  # 🎯 Job 4：部署至 production 環境（需人工批准）
  # ===============================
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      # 🔐 使用 Production 專屬 Token (最高權限)
      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.PROD_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="prod-${{ needs.build.outputs.version }}"
          
          cat > release_notes.md << 'EOF'
          ## 🚀 Production Release
          
          **Version:** ${{ needs.build.outputs.version }}
          **Environment:** Production
          **Released:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          ### 📝 Changes in this release:
          ${{ needs.build.outputs.changelog }}
          
          ### ✅ Quality Gates Passed
          - ✓ Lint checks
          - ✓ Unit tests
          - ✓ Dev deployment
          - ✓ Staging verification
          - ✓ Manual approval
          
          ---
          *Official production release - Auto-generated by GitHub Actions*
          EOF
          
          echo "🚀 Creating production release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing production release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes-file release_notes.md
          else
            echo "🆕 Creating new production release..."
            gh release create "$TAG" build.zip --notes-file release_notes.md --latest
          fi

      # 📧 Notify All Related PRs and Issues
      - name: Notify Production Deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 通知最近合併的 PR
          RECENT_PR=$(gh pr list --state merged --limit 1 --json number --jq '.[0].number' || echo "")
          
          if [ ! -z "$RECENT_PR" ]; then
            gh pr comment $RECENT_PR --body "🎉 **Deployed to Production!**

Version: \`${{ needs.build.outputs.version }}\`

Your changes are now live in production! 🚀" || true
          fi
          
          # 通知相關 issues
          ISSUES=$(git log -5 --pretty=%B | grep -oP '#\K\d+' | sort -u || echo "")
          
          if [ ! -z "$ISSUES" ]; then
            for ISSUE in $ISSUES; do
              gh issue comment $ISSUE --body "🎉 **Deployed to Production!**

Version: \`${{ needs.build.outputs.version }}\`

Related changes are now live! Issue can be closed if resolved." || true
            done
          fi

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "⚠️ Production deployment failed — rolling back..."
          gh release delete "prod-${{ needs.build.outputs.version }}" --yes || echo "No rollback needed"
          
          # 通知團隊部署失敗
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚨 *PRODUCTION DEPLOYMENT FAILED* 🚨\n\nVersion: `${{ needs.build.outputs.version }}`\nAutomatic rollback initiated.\n\n@channel Please investigate immediately!"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }} || echo "⚠️ Slack not configured