name: CI/CD Deployment Pipeline (Outstanding Level)
permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ===============================
  # 🏗️ Job 1：建置 + 測試 + 上傳 artifact
  # ===============================
  build:
    name: Build and Test (Matrix)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.NEW_TAG }}
    strategy:
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Generate Semantic Version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEW_TAG=$(echo $LAST_TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "📦 New Version: $NEW_TAG"

      # 🧾 自動產生 changelog
      - name: Generate Changelog
        id: changelog
        if: matrix.node == 18  # 只在一個 matrix 執行
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" | head -20)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          echo "📝 Changelog generated"
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" > changelog.txt

      # ✅ 新增：將 changelog 作為 artifact 儲存
      - name: Save changelog as artifact
        if: matrix.node == 18
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.txt

      # 🧪 Pre-build lint/test gate (Fail Fast)
      - name: 🔍 Pre-build Quality Gate
        run: |
          echo "🔍 Running quality checks before build..."

          echo "📦 Installing dependencies for checks..."
          bun install
          
          # Lint check (skip if not configured, fail if configured but fails)
          echo "Running lint..."
          set +e
          LINT_OUTPUT=$(bun run lint 2>&1)
          LINT_EXIT=$?
          set -e
          
          if echo "$LINT_OUTPUT" | grep -qi "was not found\|script not found"; then
            echo "⚠️ Warning: No lint script configured - skipping"
          elif [ $LINT_EXIT -ne 0 ]; then
            echo "❌ Lint failed - stopping build"
            echo "$LINT_OUTPUT"
            exit 1
          else
            echo "✅ Lint passed"
          fi
          
          # Test check (skip if not configured, fail if configured but fails)
          echo "Running tests..."
          set +e
          TEST_OUTPUT=$(bun run test 2>&1)
          TEST_EXIT=$?
          set -e
          
          if echo "$TEST_OUTPUT" | grep -qi "was not found\|script not found"; then
            echo "⚠️ Warning: No test script configured - skipping"
          elif [ $TEST_EXIT -ne 0 ]; then
            echo "❌ Tests failed - stopping build"
            echo "$TEST_OUTPUT"
            exit 1
          else
            echo "✅ Tests passed"
          fi
          
          echo "✅ Quality gate passed"

      - name: Install dependencies and build
        run: |
          echo "📦 Ensuring dependencies..."
          if [ ! -d node_modules ]; then
            echo "🆕 node_modules not found, installing..."
            bun install
          else
            echo "✅ node_modules already present, skipping install"
          fi
          echo "🏗️ Building project..."
          bun run build
          zip -r build.zip .

      - name: Upload build artifact (unique per Node)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node }}
          path: build.zip
          retention-days: 1

  # ===============================
  # 🧪 Job 2：執行單元測試
  # ===============================
  test-unit:
    name: Run Unit Tests
    needs: build
    runs-on: ubuntu-latest
    env:
      TEST_ENV: unit
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Extract artifact
        run: |
          set -e
          mkdir -p build
          FOUND=0
          for zip in build-artifact-20/build.zip build.zip build-artifact-*/build.zip; do
            if [ -f "$zip" ]; then
              echo "📦 解壓縮 artifact: $zip"
              unzip -oq "$zip" -d build
              FOUND=1
              break
            fi
          done
          if [ $FOUND -eq 0 ]; then
            echo "❌ 找不到可用的 build artifact"
            ls -R
            exit 1
          fi

      - name: Install dependencies
        working-directory: build
        run: |
          if [ -d node_modules ]; then
            echo "✅ node_modules 已存在，略過安裝"
          else
            bun install
          fi

      - name: Run unit tests
        working-directory: build
        run: |
          set -o pipefail
          bun run test:unit | tee test-results-unit.txt

      - name: Upload unit test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-logs
          path: build/test-results-unit.txt
          if-no-files-found: warn

  # ===============================
  # 🧪 Job 3：執行整合測試與覆蓋率
  # ===============================
  test-integration:
    name: Run Integration Tests & Coverage
    needs: test-unit
    runs-on: ubuntu-latest
    env:
      TEST_ENV: integration
      COVERAGE_THRESHOLD: 80
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Extract artifact
        run: |
          set -e
          mkdir -p build
          FOUND=0
          for zip in build-artifact-20/build.zip build.zip build-artifact-*/build.zip; do
            if [ -f "$zip" ]; then
              echo "📦 解壓縮 artifact: $zip"
              unzip -oq "$zip" -d build
              FOUND=1
              break
            fi
          done
          if [ $FOUND -eq 0 ]; then
            echo "❌ 找不到可用的 build artifact"
            ls -R
            exit 1
          fi

      - name: Install dependencies
        working-directory: build
        run: |
          if [ -d node_modules ]; then
            echo "✅ node_modules 已存在，略過安裝"
          else
            bun install
          fi

      - name: Run integration tests
        working-directory: build
        run: |
          set -o pipefail
          bun run test:integration | tee test-results-integration.txt

      - name: Run coverage across all tests
        working-directory: build
        run: |
          set -o pipefail
          bun run test:coverage | tee coverage-summary.txt

      - name: Enforce coverage threshold
        working-directory: build
        run: |
          node -e "
            const fs = require('node:fs');
            const summary = fs.readFileSync('coverage-summary.txt', 'utf8');
            const match = summary.match(/# all files\s*\|\s*([\d.]+)/);
            if (!match) {
              console.error('❌ Unable to locate coverage data');
              process.exit(1);
            }
            const coverage = parseFloat(match[1]);
            const threshold = Number(process.env.COVERAGE_THRESHOLD);
            console.log('📊 Line coverage:', coverage + '%');
            if (coverage < threshold) {
              console.error(`❌ Coverage ${coverage}% is below threshold ${threshold}%`);
              process.exit(1);
            }
          "


      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            build/coverage-summary.txt
            build/test-results-integration.txt
          if-no-files-found: warn

  # ===============================
  # 🚀 Job 4：部署至 dev 環境
  # ===============================
  deploy-dev:
    name: Deploy to Development
    needs: [build, test-integration]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Install GitHub CLI
        run: sudo apt install gh -y
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      # ✅ 新增：下載 changelog artifact
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          
      - name: Verify artifact
        run: ls -lh
  
      # 🔐 使用環境專屬 Secrets
      - name: Create or Update Dev Release
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="dev-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="Development build $TAG
          ## 📝 Changes in this release:
          $CHANGELOG"
          
          echo "🚀 Deploying $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing dev release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "🆕 Creating new dev release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

  # ===============================
  # 🧪 Job 5：部署至 staging 環境
  # ===============================
  deploy-staging:
    name: Deploy to Staging
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Install GitHub CLI
        run: sudo apt install gh -y
  
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      # ✅ 新增：下載 changelog artifact
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
  
      - name: Create or Update Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.STG_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="🧪 Pre-production test build $TAG
          
          ## 📝 Changes in this release:
          $CHANGELOG"
          
          echo "🚀 Deploying staging release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing staging release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "🆕 Creating new staging release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

  # ===============================
  # 🎯 Job 6：部署至 production 環境（需人工批准）
  # ===============================
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      # ✅ 新增：下載 changelog artifact
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.PROD_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="prod-${{ needs.build.outputs.version }}"
          CHANGELOG=$(cat changelog.txt)
          NOTE="🚀 Official production release $TAG
          
          ## 📝 Changes in this release:
          $CHANGELOG
          
          ## ✅ Quality Assurance
          - ✅ Passed all tests
          - ✅ Deployed to dev
          - ✅ Deployed to staging
          - ✅ Manual approval granted"
          
          echo "🚀 Creating production release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "♻️ Updating existing production release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "🆕 Creating new production release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
