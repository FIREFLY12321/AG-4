name: CI/CD Deployment Pipeline (Outstanding Level)
permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  push:
    branches: [ main ]
  pull_request: 
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ===============================
  # üèóÔ∏è Job 1ÔºöÂª∫ÁΩÆ + Ê∏¨Ë©¶ + ‰∏äÂÇ≥ artifact
  # ===============================
  build:
    name: Build and Test (Matrix)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.NEW_TAG }}
      changelog: ${{ steps.changelog.outputs.CHANGELOG }}
    strategy:
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Generate Semantic Version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEW_TAG=$(echo $LAST_TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "üì¶ New Version: $NEW_TAG"

      # üßæ Ëá™ÂãïÁî¢Áîü changelog
      - name: Generate Changelog
        id: changelog
        if: matrix.node == 18  # Âè™Âú®‰∏ÄÂÄã matrix Âü∑Ë°å
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" | head -20)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          echo "üìù Changelog generated"
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Save changelog as artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.txt

      # üß™ Pre-build lint/test gate (Fail Fast)
      - name: üîç Pre-build Quality Gate
        run: |
          echo "üîç Running quality checks before build..."
          
          # Lint check (skip if not configured, fail if configured but fails)
          echo "Running lint..."
          set +e
          LINT_OUTPUT=$(bun run lint 2>&1)
          LINT_EXIT=$?
          set -e
          
          if echo "$LINT_OUTPUT" | grep -qi "was not found\|script not found"; then
            echo "‚ö†Ô∏è Warning: No lint script configured - skipping"
          elif [ $LINT_EXIT -ne 0 ]; then
            echo "‚ùå Lint failed - stopping build"
            echo "$LINT_OUTPUT"
            exit 1
          else
            echo "‚úÖ Lint passed"
          fi
          
          # Test check (skip if not configured, fail if configured but fails)
          echo "Running tests..."
          set +e
          TEST_OUTPUT=$(bun run test 2>&1)
          TEST_EXIT=$?
          set -e
          
          if echo "$TEST_OUTPUT" | grep -qi "was not found\|script not found"; then
            echo "‚ö†Ô∏è Warning: No test script configured - skipping"
          elif [ $TEST_EXIT -ne 0 ]; then
            echo "‚ùå Tests failed - stopping build"
            echo "$TEST_OUTPUT"
            exit 1
          else
            echo "‚úÖ Tests passed"
          fi
          
          echo "‚úÖ Quality gate passed"

      - name: Install dependencies and build
        run: |
          echo "üì¶ Installing dependencies..."
          bun install
          echo "üèóÔ∏è Building project..."
          bun run build
          zip -r build.zip .

      - name: Upload build artifact (unique per Node)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node }}
          path: build.zip
          retention-days: 1

  # ===============================
  # üöÄ Job 2ÔºöÈÉ®ÁΩ≤Ëá≥ dev Áí∞Â¢É
  # ===============================
  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Install GitHub CLI
        run: sudo apt install gh -y
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true
            
      - name: Verify artifact
        run: ls -lh
  
      # üîê ‰ΩøÁî®Áí∞Â¢ÉÂ∞àÂ±¨ Secrets
      - name: Create or Update Dev Release
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="dev-${{ needs.build.outputs.version }}"
          CHANGELOG="${{ needs.build.outputs.changelog }}"
          NOTE="Development build $TAG

          ## üìù Changes in this release:
          $CHANGELOG"
          
          echo "üöÄ Deploying $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "‚ôªÔ∏è Updating existing dev release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "üÜï Creating new dev release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

      # üìß PR / Issue ÈÄöÁü•
      - name: Notify PR/Issue on Dev Deployment
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          STATUS="${{ job.status }}"
          VERSION="${{ needs.build.outputs.version }}"
          
          if [ "$STATUS" == "success" ]; then
            MESSAGE="‚úÖ **Dev Deployment Successful** üéâ
            
            - Version: \`$VERSION\`
            - Environment: \`dev\`
            - Release: [dev-$VERSION](https://github.com/${{ github.repository }}/releases/tag/dev-$VERSION)
            
            Ready for testing!"
          else
            MESSAGE="‚ùå **Dev Deployment Failed**
            
            - Version: \`$VERSION\`
            - Environment: \`dev\`
            - Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
          fi
          
          # Â¶ÇÊûúÊòØ PRÔºåÂú® PR ‰∏äÁïôË®Ä
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "$MESSAGE"
          fi
          
          # Â¶ÇÊûú commit message ‰∏≠Êúâ issue Á∑®ËôüÔºåÂú® issue ‰∏äÁïôË®Ä
          ISSUES=$(git log -1 --pretty=%B | grep -oE '#[0-9]+' | tr -d '#' || echo "")
          for ISSUE in $ISSUES; do
            gh issue comment $ISSUE --body "$MESSAGE" || echo "Issue #$ISSUE not found"
          done
          
          echo "$MESSAGE"

      - name: Notify GitHub
        if: always()
        run: echo "‚úÖ Dev deployment ${{ needs.build.outputs.version }} finished"

  # ===============================
  # üß™ Job 3ÔºöÈÉ®ÁΩ≤Ëá≥ staging Áí∞Â¢É
  # ===============================
  deploy-staging:
    name: Deploy to Staging
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Install GitHub CLI
        run: sudo apt install gh -y
  
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true
  
      # üîê ‰ΩøÁî®Áí∞Â¢ÉÂ∞àÂ±¨ Secrets
      - name: Create or Update Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.STG_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-${{ needs.build.outputs.version }}"
          CHANGELOG="${{ needs.build.outputs.changelog }}"
          NOTE="üß™ Pre-production test build $TAG
          
          ## üìù Changes in this release:
          $CHANGELOG"
          
          echo "üöÄ Deploying staging release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "‚ôªÔ∏è Updating existing staging release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "üÜï Creating new staging release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

      # üìß PR / Issue ÈÄöÁü•
      - name: Notify PR/Issue on Staging Deployment
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          STATUS="${{ job.status }}"
          VERSION="${{ needs.build.outputs.version }}"
          
          if [ "$STATUS" == "success" ]; then
            MESSAGE="üß™ **Staging Deployment Successful**
            
            - Version: \`$VERSION\`
            - Environment: \`staging\`
            - Release: [staging-$VERSION](https://github.com/${{ github.repository }}/releases/tag/staging-$VERSION)
            
            Ready for QA testing!"
          else
            MESSAGE="‚ùå **Staging Deployment Failed**
            
            - Version: \`$VERSION\`
            - Environment: \`staging\`"
          fi
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "$MESSAGE"
          fi
          
          ISSUES=$(git log -1 --pretty=%B | grep -oE '#[0-9]+' | tr -d '#' || echo "")
          for ISSUE in $ISSUES; do
            gh issue comment $ISSUE --body "$MESSAGE" || true
          done

      - name: Slack Notification
        if: always()
        env:
          WEBHOOK_URL: "reggin-fke2834.slack.com"
          #WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"üß© Staging release *${{ needs.build.outputs.version }}* completed successfully.\"}" \
            $WEBHOOK_URL || echo "‚ö†Ô∏è Slack not configured"

  # ===============================
  # üéØ Job 4ÔºöÈÉ®ÁΩ≤Ëá≥ production Áí∞Â¢ÉÔºàÈúÄ‰∫∫Â∑•ÊâπÂáÜÔºâ
  # ===============================
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      # üîê ‰ΩøÁî®Áí∞Â¢ÉÂ∞àÂ±¨ Secrets
      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.PROD_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          TAG="prod-${{ needs.build.outputs.version }}"
          CHANGELOG="${{ needs.build.outputs.changelog }}"
          NOTE="üöÄ Official production release $TAG
          
          ## üìù Changes in this release:
          $CHANGELOG
          
          ## ‚úÖ Quality Assurance
          - ‚úÖ Passed all tests
          - ‚úÖ Deployed to dev
          - ‚úÖ Deployed to staging
          - ‚úÖ Manual approval granted"
          
          echo "üöÄ Creating production release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "‚ôªÔ∏è Updating existing production release..."
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            echo "üÜï Creating new production release..."
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
      - name: Save changelog as artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.txt
      # üìß PR / Issue ÈÄöÁü•
      - name: Notify PR/Issue on Production Deployment
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          STATUS="${{ job.status }}"
          VERSION="${{ needs.build.outputs.version }}"
          
          if [ "$STATUS" == "success" ]; then
            MESSAGE="üöÄ **Production Deployment Successful** üéâ
            
            - Version: \`$VERSION\`
            - Environment: \`production\`
            - Release: [prod-$VERSION](https://github.com/${{ github.repository }}/releases/tag/prod-$VERSION)
            
            ## üìù Changelog:
            ${{ needs.build.outputs.changelog }}
            
            Live now! üåü"
          else
            MESSAGE="‚ùå **Production Deployment Failed**
            
            - Version: \`$VERSION\`
            - Environment: \`production\`
            - Rollback initiated"
          fi
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "$MESSAGE"
          fi
          
          ISSUES=$(git log -1 --pretty=%B | grep -oE '#[0-9]+' | tr -d '#' || echo "")
          for ISSUE in $ISSUES; do
            gh issue comment $ISSUE --body "$MESSAGE" || true
          done

      - name: Rollback on Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.PROD_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "‚ö†Ô∏è Production deployment failed ‚Äî rolling back..."
          gh release delete "prod-${{ needs.build.outputs.version }}" --yes || echo "No rollback needed"
