name: CI/CD Deployment Pipeline (Outstanding Level)

permissions:
  contents: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ===============================
  # üèóÔ∏è Job 1ÔºöÂª∫ÁΩÆ + Ê∏¨Ë©¶ + ‰∏äÂÇ≥ artifact
  # ===============================
  build:
    name: Build and Test (Matrix)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.NEW_TAG }}
    strategy:
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Bun runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Generate Semantic Version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEW_TAG=$(echo $LAST_TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "üì¶ New Version: $NEW_TAG"

      - name: Generate Changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "üßæ Generating changelog since $LAST_TAG..."
          git log $LAST_TAG..HEAD --oneline > changelog.txt
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          cat changelog.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install dependencies and build
        run: |
          echo "üì¶ Installing dependencies..."
          bun install
          echo "üèóÔ∏è Building project..."
          bun run build
          zip -r build.zip .

      - name: Run Lint and Tests (Tolerant Gate)
        run: |
          echo "üîç Running lint..."
          if bun run | grep -q "lint"; then
            bun run lint
          else
            echo "‚ö†Ô∏è No lint script found, skipping lint."
          fi

          echo "üß™ Running tests..."
          if bun run | grep -q "test"; then
            bun run test
          else
            echo "‚ö†Ô∏è No test script found, skipping tests."
          fi

      - name: Upload build artifact (unique per Node)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node }}
          path: build.zip
          retention-days: 1

  # ===============================
  # üöÄ Job 2ÔºöÈÉ®ÁΩ≤Ëá≥ dev Áí∞Â¢É
  # ===============================
  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Install GitHub CLI
        run: sudo apt install gh -y
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true
            
      - name: Verify artifact
        run: ls -lh
  
      - name: Create or Update Dev Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEV_TOKEN: ${{ secrets.DEV_TOKEN }}
        run: |
          TAG="dev-${{ needs.build.outputs.version }}"
          NOTE="üßæ Changelog:\n${CHANGELOG}\n\nDevelopment build $TAG"
          echo "üöÄ Deploying $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
          echo "üîê Using DEV token (len=${#DEV_TOKEN})"

      - name: Notify PR / Issue
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr list --state open --json url --jq '.[0].url' || echo "")
          if [ -n "$PR_URL" ]; then
            gh pr comment "$PR_URL" --body "‚úÖ Dev deployment done for $TAG"
          else
            echo "‚ö†Ô∏è No open PR found to comment on."
          fi

  # ===============================
  # üß™ Job 3ÔºöÈÉ®ÁΩ≤Ëá≥ staging Áí∞Â¢É
  # ===============================
  deploy-staging:
    name: Deploy to Staging
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Install GitHub CLI
        run: sudo apt install gh -y
  
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true
  
      - name: Create or Update Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          STG_TOKEN: ${{ secrets.STG_TOKEN }}
        run: |
          TAG="staging-${{ needs.build.outputs.version }}"
          NOTE="üß™ Staging build $TAG\n\n${CHANGELOG}"
          echo "üöÄ Deploying staging release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
          echo "üîê Using STG token (len=${#STG_TOKEN})"

      - name: Slack Notification
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"üß© Staging release *${{ needs.build.outputs.version }}* completed successfully.\"}" \
            $WEBHOOK_URL || echo "‚ö†Ô∏è Slack not configured"

      - name: Notify PR / Issue
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr list --state open --json url --jq '.[0].url' || echo "")
          if [ -n "$PR_URL" ]; then
            gh pr comment "$PR_URL" --body "‚úÖ Staging deployment done for $TAG"
          fi

  # ===============================
  # üéØ Job 4ÔºöÈÉ®ÁΩ≤Ëá≥ production Áí∞Â¢ÉÔºàÈúÄ‰∫∫Â∑•ÊâπÂáÜÔºâ
  # ===============================
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROD_TOKEN: ${{ secrets.PROD_TOKEN }}
        run: |
          TAG="prod-${{ needs.build.outputs.version }}"
          NOTE="üöÄ Official production release\n\n${CHANGELOG}"
          echo "üöÄ Creating production release: $TAG"
          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber
            gh release edit "$TAG" --notes "$NOTE"
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
          echo "üîê Using PROD token (len=${#PROD_TOKEN})"

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "‚ö†Ô∏è Production deployment failed ‚Äî rolling back..."
          gh release delete "prod-${{ needs.build.outputs.version }}" --yes || echo "No rollback needed"

      - name: Notify PR / Issue
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr list --state open --json url --jq '.[0].url' || echo "")
          [ -n "$PR_URL" ] && gh pr comment "$PR_URL" --body "üöÄ Production deployment done for $TAG"
